#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef pair<int, int> II;

class TigerMaster {
public:
	vector <int> train(int N, int M, vector <int> X, vector <int> Y, vector <int> D) {
		vector<II> adjList[100];
		vector<II> sorted;
		for(int i = 0; i < M; i++) {
			II u = make_pair(D[i], i);
			sorted.push_back(u);
			adjList[X[i]].push_back(u);
			adjList[Y[i]].push_back(u);
		}
		sort(sorted.begin(), sorted.end());

		for(int i = 0; i < N; i++)
			sort(adjList[i].begin(), adjList[i].end());
		int dp[100];
		memset(dp, 0, sizeof dp);
		int prev[100][10001];
		memset(prev, -1, sizeof prev);
		for(int i = 0; i < M; i++) {
			int idx = sorted[i].second;
			int x = max(dp[X[idx]], dp[Y[idx]] + 1);
			int y = max(dp[Y[idx]], dp[X[idx]] + 1);
			if(x > dp[X[idx]])
				prev[X[idx]][x] = idx;
			dp[X[idx]] = x;
			if(y > dp[Y[idx]])
				prev[Y[idx]][y] = idx;
			dp[Y[idx]] = y;
		}
		int cur_len = -1;
		int cur_v = -1;
		for(int i = 0; i < N; i++) {
			if(dp[i] > cur_len) {
				cur_len = dp[i];
				cur_v = i;
			}
		}
		vector<int> ans;
		if(cur_len < 20) {
			return ans;
		}
		while(ans.size() < 20) {
			int edge_idx = prev[cur_v][cur_len];
			ans.push_back(edge_idx);
			cur_v = X[edge_idx] == cur_v ? Y[edge_idx] : X[edge_idx];
			cur_len--;
		}
		ans.push_back(cur_v);
		reverse(ans.begin(), ans.end());
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, vector <int> p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	TigerMaster *obj;
	vector <int> answer;
	obj = new TigerMaster();
	clock_t startTime = clock();
	answer = obj->train(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p5.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p5[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p5.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p5[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 23;
	int t2[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,21,6,1,19,22,3,10,14,13,12,2,8,15,0,9,7,17,4,20,5};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 30;
	int t2[] = {1,2,2,2,2,0,0,1,2,2,1,2,1,2,2,2,1,2,1,2,0,1,0,2,0,2,0,0,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,1,1,0,0,1,1,0,1,1,2,0,0,1,1,0,0,0,2,1,2,2,1,1,2,0,1,2,2,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {55,73,50,53,13,61,72,30,91,76,73,16,46,65,12,89,60,98,45,98,33,72,39,33,14,48,1,80,79,55};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,26,14,4,24,11,7,23,18,12,25,2,0,16,5,6,21,1,10,9,28};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 8;
	p1 = 80;
	int t2[] = {4,2,3,1,4,1,2,5,0,2,2,1,0,3,5,6,2,1,1,3,5,3,1,4,6,6,7,1,5,6,4,6,5,0,2,1,3,5,7,5,7,7,0,2,6,3,4,5,6,0,7,7,4,7,6,2,2,7,6,4,1,0,5,6,4,5,1,2,5,3,1,4,6,3,0,6,7,2,0,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,6,5,4,2,3,0,0,7,7,3,4,1,6,0,5,6,0,6,5,0,1,0,1,5,4,6,2,1,4,5,3,3,2,6,7,0,3,3,7,5,0,3,3,7,2,2,1,5,3,0,1,1,5,5,6,4,6,0,5,4,7,1,2,3,7,2,7,4,5,4,7,5,6,2,3,4,3,1,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {757,471,343,33,124,511,90,677,922,916,153,763,495,492,190,379,242,710,243,905,958,120,308,366,595,284,902,226,527,750,844,708,381,75,256,465,519,529,832,738,376,553,776,610,431,142,125,818,352,546,490,581,241,571,825,79,418,191,451,409,462,526,539,901,411,287,952,821,244,737,969,351,415,446,460,487,106,413,974,731};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {6,55,6,14,68,25,48,40,44,73,75,13,5,28,37,49,41,53,24,31,69};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
