#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct Edge {
	int u, v, l;
	Edge(int u, int v, int l) : u(u), v(v), l(l) {}
	bool operator<(Edge rhs) const {
		return l < rhs.l;
	}
};

const int mod = 1e9 + 7;

class TheSocialNetwork {
private:
	bool check(int n, int l, map<int, vector<Edge> > adjMat, set<int> removed) {
		set<int> vis;
		vis.insert(1);
		queue<int> q;
		q.push(1);
		while(!q.empty()) {
			int u = q.front();
			q.pop();
			for(int i = 0; i < adjMat[u].size(); i++) {
				Edge edge = adjMat[u][i];
				if(edge.l <= l) {
					continue;
				}
				if(removed.count(edge.l)) {
					continue;
				}
				int v = edge.u == u ? edge.v : edge.u;
				if(vis.count(v)) {
					continue;
				}
				vis.insert(v);
				q.push(v);
			}
		}
		return vis.size() == n;
	}
	int pow_mod(int a, int p) {
		if(p == 0) {
			return 1;
		}
		int base = pow_mod(a, p >> 1);
		int squared = (base * 1LL * base) % mod;
		if(p & 1) {
			return (squared * 1LL * a) % mod;
		} else {
			return squared;
		}
	}
public:
	int minimumCut(int n, int m, vector <int> u, vector <int> v, vector <int> l) {
		vector<Edge> edges;
		map<int, vector<Edge> > adjMat;
		for(int i = 0; i < m; i++) {
			Edge edge(u[i], v[i], l[i]);
			edges.push_back(edge);
			adjMat[u[i]].push_back(edge);
			adjMat[v[i]].push_back(edge);
		}
		sort(edges.begin(), edges.end());
		set<int> removed; 
		int boundary = m - 1;
		while(check(n, 0, adjMat, removed)) {
			int left = 0, right = boundary;
			while(left != right) {
				int mid = (left + right) >> 1;
				if(!check(n, edges[mid].l, adjMat, removed)) {
					right = mid;
				} else {
					left = mid + 1;
				}
			}
			removed.insert(edges[left].l);
			boundary = left - 1;
		}
		
		int ans = 0;
		for(set<int>::iterator itr = removed.begin(); itr != removed.end(); itr++) {
			ans = (ans + pow_mod(2, *itr)) % mod;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheSocialNetwork *obj;
	int answer;
	obj = new TheSocialNetwork();
	clock_t startTime = clock();
	answer = obj->minimumCut(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 6;
	p1 = 6;
	int t2[] = {1,2,3,4,5,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,3,4,5,6,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,7,3,4,6,12};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 7;
	int t2[] = {1,1,1,2,2,3,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,3,2,5,3,5,4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,8,2,3,4,6,9};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 28;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 6;
	int t2[] = {1,1,2,2,3,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,3,4,5,6,7};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {7,11,6,9,20,15};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 64;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 11;
	int t2[] = {1,1,2,2,3,3,3,4,5,5,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,8,3,5,4,6,7,5,6,8,8};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,3,1,6,11,8,9,10,7,4,5};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 12;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 13;
	p1 = 56;
	int t2[] = {1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,9,9,9,9,10,10,10,11,11,12};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {3,4,5,7,9,12,13,3,5,8,9,10,12,13,5,6,8,9,10,11,12,5,6,7,9,11,13,7,8,9,11,12,7,8,9,10,13,8,9,10,11,12,13,9,11,12,10,11,12,13,11,12,13,12,13,13};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {82,240,395,1041,1165,1274,1540,1650,1904,2306,2508,3162,3380,3637,3778,3913,3971,4101,4148,4218,4394,4434,5107,6147,6280,6337,6461,6490,7056,8024,8373,8924,8961,9058,9304,9359,10899,11049,11090,11174,11269,11356,11547,11808,12566,12591,13322,13447,13667,13672,15013,15319,16153,16447,16454,16470};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 504663883;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
