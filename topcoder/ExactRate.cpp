#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ExactRate {
private:
	vector<int> generate(int seed, int N) {
		vector<int> h;
		int h0 = (seed * 1LL * 1103515245 + 12345) % (1LL << 31);
		h.push_back(h0);
		for(int i = 1; i < N; i++) {
			int hi = (h.back() * 1LL * 1103515245 + 12345) % (1LL << 31);
			h.push_back(hi);
		}
		return h;
	}
public:
	vector <int> getLongest(int N, int seed, int threshold, int S, int F) {
		vector<int> h = generate(seed, N);
		long long sum = 0LL;
		int ans = 0;
		int start = 0;
		map<long long, int> dict;
		dict[0] = 0;
		for(int i = 0; i < h.size(); i++) {
			if(h[i] > threshold) {
				sum += F;
			} else {
				sum -= S;
			}
			if(dict.count(sum)) {
				int a = dict[sum];
				int len = i + 1 - a;
				if(len > ans) {
					ans = len;
					start = a;
				}
			} else {
				dict[sum] = i+1;
			}
		}
		return {start, start + ans};
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, vector <int> p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	ExactRate *obj;
	vector <int> answer;
	obj = new ExactRate();
	clock_t startTime = clock();
	answer = obj->getLongest(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p5.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p5[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p5.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p5[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	vector <int> p5;
	
	{
	// ----- test 0 -----
	p0 = 12;
	p1 = 47;
	p2 = 1012345678;
	p3 = 1;
	p4 = 2;
	int t5[] = {0,6};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 12;
	p1 = 47;
	p2 = 1012345678;
	p3 = 2;
	p4 = 1;
	int t5[] = {2,8};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 12;
	p1 = 47;
	p2 = 1012345678;
	p3 = 7;
	p4 = 11;
	int t5[] = {0,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
