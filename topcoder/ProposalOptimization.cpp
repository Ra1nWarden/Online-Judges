#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ProposalOptimization {
public:
	double bestPath(int R, int C, int K, vector <int> roses, vector <int> tulips, vector <int> costs) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, double p6) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}";
	cout << "]" << endl;
	ProposalOptimization *obj;
	double answer;
	obj = new ProposalOptimization();
	clock_t startTime = clock();
	answer = obj->bestPath(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p6 - answer) <= 1e-9 * max(1.0, fabs(p6));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	double p6;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 100;
	int t3[] = {0,2,3,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,3,5,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,70,80,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 0.6666666666666667;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 100;
	int t3[] = {0,2,3,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,3,5,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,170,100,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 0.6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	p2 = 98;
	int t3[] = {0,1,1,1,1,1,1,1,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,1,1,1,1,1,1,1,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,33,33,33,33,33,33,33,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = -1.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 9;
	p2 = 622;
	int t3[] = {0,2,12,1,6,10,10,24,3,1,7,4,4,1,37,4,6,8,2,20,5,20,6,7,22,3,2,8,31,18,5,28,11,1,34,1,4,2,6,1,6,9,5,7,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,4,37,22,3,14,10,6,5,6,5,17,4,7,12,3,1,3,3,1,5,1,11,37,6,24,6,3,21,1,2,27,7,1,8,1,8,1,26,20,6,6,6,7,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,19,70,79,18,43,49,65,16,38,61,69,43,12,62,11,44,35,7,62,40,88,60,57,65,38,46,18,69,87,28,80,47,5,64,1,15,3,86,41,86,21,56,28,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 2.161290322580645;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 3;
	p2 = 15;
	int t3[] = {0,1,3,1,1,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,1,2,6,1,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,1,18,9,1,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6 = 1.0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
